// Code generated by MockGen. DO NOT EDIT.
// Source: adapter.go
//
// Generated by this command:
//
//	mockgen -source=adapter.go -destination=mock_adapter.go -package=adapters
//

// Package adapters is a generated GoMock package.
package adapters

import (
	context "context"
	reflect "reflect"

	consts "github.com/matrixbotio/exchange-gates-lib/internal/consts"
	structs "github.com/matrixbotio/exchange-gates-lib/internal/structs"
	workers "github.com/matrixbotio/exchange-gates-lib/internal/workers"
	structs0 "github.com/matrixbotio/exchange-gates-lib/pkg/structs"
	gomock "go.uber.org/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
	isgomock struct{}
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// CanTrade mocks base method.
func (m *MockAdapter) CanTrade() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanTrade")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanTrade indicates an expected call of CanTrade.
func (mr *MockAdapterMockRecorder) CanTrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanTrade", reflect.TypeOf((*MockAdapter)(nil).CanTrade))
}

// CancelPairOrder mocks base method.
func (m *MockAdapter) CancelPairOrder(pairSymbol string, orderID int64, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPairOrder", pairSymbol, orderID, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPairOrder indicates an expected call of CancelPairOrder.
func (mr *MockAdapterMockRecorder) CancelPairOrder(pairSymbol, orderID, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPairOrder", reflect.TypeOf((*MockAdapter)(nil).CancelPairOrder), pairSymbol, orderID, ctx)
}

// CancelPairOrderByClientOrderID mocks base method.
func (m *MockAdapter) CancelPairOrderByClientOrderID(pairSymbol, clientOrderID string, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPairOrderByClientOrderID", pairSymbol, clientOrderID, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPairOrderByClientOrderID indicates an expected call of CancelPairOrderByClientOrderID.
func (mr *MockAdapterMockRecorder) CancelPairOrderByClientOrderID(pairSymbol, clientOrderID, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPairOrderByClientOrderID", reflect.TypeOf((*MockAdapter)(nil).CancelPairOrderByClientOrderID), pairSymbol, clientOrderID, ctx)
}

// Connect mocks base method.
func (m *MockAdapter) Connect(credentials structs0.APICredentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", credentials)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockAdapterMockRecorder) Connect(credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockAdapter)(nil).Connect), credentials)
}

// GenClientOrderID mocks base method.
func (m *MockAdapter) GenClientOrderID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenClientOrderID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenClientOrderID indicates an expected call of GenClientOrderID.
func (mr *MockAdapterMockRecorder) GenClientOrderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenClientOrderID", reflect.TypeOf((*MockAdapter)(nil).GenClientOrderID))
}

// GetAccountBalance mocks base method.
func (m *MockAdapter) GetAccountBalance() ([]structs.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance")
	ret0, _ := ret[0].([]structs.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockAdapterMockRecorder) GetAccountBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockAdapter)(nil).GetAccountBalance))
}

// GetCandleWorker mocks base method.
func (m *MockAdapter) GetCandleWorker() workers.ICandleWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandleWorker")
	ret0, _ := ret[0].(workers.ICandleWorker)
	return ret0
}

// GetCandleWorker indicates an expected call of GetCandleWorker.
func (mr *MockAdapterMockRecorder) GetCandleWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandleWorker", reflect.TypeOf((*MockAdapter)(nil).GetCandleWorker))
}

// GetCandles mocks base method.
func (m *MockAdapter) GetCandles(limit int, symbol string, interval consts.Interval) ([]workers.CandleData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandles", limit, symbol, interval)
	ret0, _ := ret[0].([]workers.CandleData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandles indicates an expected call of GetCandles.
func (mr *MockAdapterMockRecorder) GetCandles(limit, symbol, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandles", reflect.TypeOf((*MockAdapter)(nil).GetCandles), limit, symbol, interval)
}

// GetHistoryOrder mocks base method.
func (m *MockAdapter) GetHistoryOrder(pairSymbol string, orderID int64) (structs.OrderHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryOrder", pairSymbol, orderID)
	ret0, _ := ret[0].(structs.OrderHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryOrder indicates an expected call of GetHistoryOrder.
func (mr *MockAdapterMockRecorder) GetHistoryOrder(pairSymbol, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryOrder", reflect.TypeOf((*MockAdapter)(nil).GetHistoryOrder), pairSymbol, orderID)
}

// GetID mocks base method.
func (m *MockAdapter) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockAdapterMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockAdapter)(nil).GetID))
}

// GetLimits mocks base method.
func (m *MockAdapter) GetLimits() structs0.ExchangeLimits {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimits")
	ret0, _ := ret[0].(structs0.ExchangeLimits)
	return ret0
}

// GetLimits indicates an expected call of GetLimits.
func (mr *MockAdapterMockRecorder) GetLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimits", reflect.TypeOf((*MockAdapter)(nil).GetLimits))
}

// GetName mocks base method.
func (m *MockAdapter) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockAdapterMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockAdapter)(nil).GetName))
}

// GetOrderByClientOrderID mocks base method.
func (m *MockAdapter) GetOrderByClientOrderID(pairSymbol, clientOrderID string) (structs.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByClientOrderID", pairSymbol, clientOrderID)
	ret0, _ := ret[0].(structs.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByClientOrderID indicates an expected call of GetOrderByClientOrderID.
func (mr *MockAdapterMockRecorder) GetOrderByClientOrderID(pairSymbol, clientOrderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByClientOrderID", reflect.TypeOf((*MockAdapter)(nil).GetOrderByClientOrderID), pairSymbol, clientOrderID)
}

// GetOrderData mocks base method.
func (m *MockAdapter) GetOrderData(pairSymbol string, orderID int64) (structs.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderData", pairSymbol, orderID)
	ret0, _ := ret[0].(structs.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderData indicates an expected call of GetOrderData.
func (mr *MockAdapterMockRecorder) GetOrderData(pairSymbol, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderData", reflect.TypeOf((*MockAdapter)(nil).GetOrderData), pairSymbol, orderID)
}

// GetOrderExecFee mocks base method.
func (m *MockAdapter) GetOrderExecFee(baseAssetTicker, quoteAssetTicker string, orderSide consts.OrderSide, orderID int64) (structs.OrderFees, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderExecFee", baseAssetTicker, quoteAssetTicker, orderSide, orderID)
	ret0, _ := ret[0].(structs.OrderFees)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderExecFee indicates an expected call of GetOrderExecFee.
func (mr *MockAdapterMockRecorder) GetOrderExecFee(baseAssetTicker, quoteAssetTicker, orderSide, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderExecFee", reflect.TypeOf((*MockAdapter)(nil).GetOrderExecFee), baseAssetTicker, quoteAssetTicker, orderSide, orderID)
}

// GetPairBalance mocks base method.
func (m *MockAdapter) GetPairBalance(pair structs.PairSymbolData) (structs.PairBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairBalance", pair)
	ret0, _ := ret[0].(structs.PairBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairBalance indicates an expected call of GetPairBalance.
func (mr *MockAdapterMockRecorder) GetPairBalance(pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairBalance", reflect.TypeOf((*MockAdapter)(nil).GetPairBalance), pair)
}

// GetPairData mocks base method.
func (m *MockAdapter) GetPairData(pairSymbol string) (structs.ExchangePairData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairData", pairSymbol)
	ret0, _ := ret[0].(structs.ExchangePairData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairData indicates an expected call of GetPairData.
func (mr *MockAdapterMockRecorder) GetPairData(pairSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairData", reflect.TypeOf((*MockAdapter)(nil).GetPairData), pairSymbol)
}

// GetPairLastPrice mocks base method.
func (m *MockAdapter) GetPairLastPrice(pairSymbol string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairLastPrice", pairSymbol)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairLastPrice indicates an expected call of GetPairLastPrice.
func (mr *MockAdapterMockRecorder) GetPairLastPrice(pairSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairLastPrice", reflect.TypeOf((*MockAdapter)(nil).GetPairLastPrice), pairSymbol)
}

// GetPairSymbol mocks base method.
func (m *MockAdapter) GetPairSymbol(baseTicker, quoteTicker string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairSymbol", baseTicker, quoteTicker)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPairSymbol indicates an expected call of GetPairSymbol.
func (mr *MockAdapterMockRecorder) GetPairSymbol(baseTicker, quoteTicker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairSymbol", reflect.TypeOf((*MockAdapter)(nil).GetPairSymbol), baseTicker, quoteTicker)
}

// GetPairs mocks base method.
func (m *MockAdapter) GetPairs() ([]structs.ExchangePairData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPairs")
	ret0, _ := ret[0].([]structs.ExchangePairData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPairs indicates an expected call of GetPairs.
func (mr *MockAdapterMockRecorder) GetPairs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPairs", reflect.TypeOf((*MockAdapter)(nil).GetPairs))
}

// GetPriceWorker mocks base method.
func (m *MockAdapter) GetPriceWorker(callback workers.PriceEventCallback) workers.IPriceWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceWorker", callback)
	ret0, _ := ret[0].(workers.IPriceWorker)
	return ret0
}

// GetPriceWorker indicates an expected call of GetPriceWorker.
func (mr *MockAdapterMockRecorder) GetPriceWorker(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceWorker", reflect.TypeOf((*MockAdapter)(nil).GetPriceWorker), callback)
}

// GetTag mocks base method.
func (m *MockAdapter) GetTag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTag indicates an expected call of GetTag.
func (mr *MockAdapterMockRecorder) GetTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockAdapter)(nil).GetTag))
}

// GetTradeEventsWorker mocks base method.
func (m *MockAdapter) GetTradeEventsWorker() workers.ITradeEventWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeEventsWorker")
	ret0, _ := ret[0].(workers.ITradeEventWorker)
	return ret0
}

// GetTradeEventsWorker indicates an expected call of GetTradeEventsWorker.
func (mr *MockAdapterMockRecorder) GetTradeEventsWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeEventsWorker", reflect.TypeOf((*MockAdapter)(nil).GetTradeEventsWorker))
}

// PlaceOrder mocks base method.
func (m *MockAdapter) PlaceOrder(ctx context.Context, order structs.BotOrderAdjusted) (structs.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", ctx, order)
	ret0, _ := ret[0].(structs.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockAdapterMockRecorder) PlaceOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockAdapter)(nil).PlaceOrder), ctx, order)
}

// VerifyAPIKeys mocks base method.
func (m *MockAdapter) VerifyAPIKeys(keyPublic, keySecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAPIKeys", keyPublic, keySecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAPIKeys indicates an expected call of VerifyAPIKeys.
func (mr *MockAdapterMockRecorder) VerifyAPIKeys(keyPublic, keySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAPIKeys", reflect.TypeOf((*MockAdapter)(nil).VerifyAPIKeys), keyPublic, keySecret)
}
