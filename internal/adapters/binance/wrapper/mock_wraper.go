// Code generated by MockGen. DO NOT EDIT.
// Source: wraper.go
//
// Generated by this command:
//
//	mockgen -source=wraper.go -destination=mock_wraper.go -package=wrapper
//

// Package wrapper is a generated GoMock package.
package wrapper

import (
	context "context"
	reflect "reflect"

	binance "github.com/adshao/go-binance/v2"
	workers "github.com/matrixbotio/exchange-gates-lib/internal/workers"
	gomock "go.uber.org/mock/gomock"
)

// MockBinanceAPIWrapper is a mock of BinanceAPIWrapper interface.
type MockBinanceAPIWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockBinanceAPIWrapperMockRecorder
	isgomock struct{}
}

// MockBinanceAPIWrapperMockRecorder is the mock recorder for MockBinanceAPIWrapper.
type MockBinanceAPIWrapperMockRecorder struct {
	mock *MockBinanceAPIWrapper
}

// NewMockBinanceAPIWrapper creates a new mock instance.
func NewMockBinanceAPIWrapper(ctrl *gomock.Controller) *MockBinanceAPIWrapper {
	mock := &MockBinanceAPIWrapper{ctrl: ctrl}
	mock.recorder = &MockBinanceAPIWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinanceAPIWrapper) EXPECT() *MockBinanceAPIWrapperMockRecorder {
	return m.recorder
}

// CancelOrderByClientOrderID mocks base method.
func (m *MockBinanceAPIWrapper) CancelOrderByClientOrderID(ctx context.Context, pairSymbol, clientOrderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderByClientOrderID", ctx, pairSymbol, clientOrderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrderByClientOrderID indicates an expected call of CancelOrderByClientOrderID.
func (mr *MockBinanceAPIWrapperMockRecorder) CancelOrderByClientOrderID(ctx, pairSymbol, clientOrderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderByClientOrderID", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).CancelOrderByClientOrderID), ctx, pairSymbol, clientOrderID)
}

// CancelOrderByID mocks base method.
func (m *MockBinanceAPIWrapper) CancelOrderByID(ctx context.Context, pairSymbol string, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderByID", ctx, pairSymbol, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrderByID indicates an expected call of CancelOrderByID.
func (mr *MockBinanceAPIWrapperMockRecorder) CancelOrderByID(ctx, pairSymbol, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderByID", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).CancelOrderByID), ctx, pairSymbol, orderID)
}

// Connect mocks base method.
func (m *MockBinanceAPIWrapper) Connect(ctx context.Context, keyPublic, keySecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, keyPublic, keySecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockBinanceAPIWrapperMockRecorder) Connect(ctx, keyPublic, keySecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).Connect), ctx, keyPublic, keySecret)
}

// GetAccountData mocks base method.
func (m *MockBinanceAPIWrapper) GetAccountData(arg0 context.Context) (*binance.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountData", arg0)
	ret0, _ := ret[0].(*binance.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountData indicates an expected call of GetAccountData.
func (mr *MockBinanceAPIWrapperMockRecorder) GetAccountData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountData", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetAccountData), arg0)
}

// GetExchangeInfo mocks base method.
func (m *MockBinanceAPIWrapper) GetExchangeInfo(ctx context.Context, pairSymbol string) (*binance.ExchangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeInfo", ctx, pairSymbol)
	ret0, _ := ret[0].(*binance.ExchangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeInfo indicates an expected call of GetExchangeInfo.
func (mr *MockBinanceAPIWrapperMockRecorder) GetExchangeInfo(ctx, pairSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeInfo", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetExchangeInfo), ctx, pairSymbol)
}

// GetKlines mocks base method.
func (m *MockBinanceAPIWrapper) GetKlines(ctx context.Context, pairSymbol, interval string, limit int) ([]*binance.Kline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKlines", ctx, pairSymbol, interval, limit)
	ret0, _ := ret[0].([]*binance.Kline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKlines indicates an expected call of GetKlines.
func (mr *MockBinanceAPIWrapperMockRecorder) GetKlines(ctx, pairSymbol, interval, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKlines", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetKlines), ctx, pairSymbol, interval, limit)
}

// GetOpenOrders mocks base method.
func (m *MockBinanceAPIWrapper) GetOpenOrders(ctx context.Context, pairSymbol string) ([]*binance.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenOrders", ctx, pairSymbol)
	ret0, _ := ret[0].([]*binance.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenOrders indicates an expected call of GetOpenOrders.
func (mr *MockBinanceAPIWrapperMockRecorder) GetOpenOrders(ctx, pairSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenOrders", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetOpenOrders), ctx, pairSymbol)
}

// GetOrderDataByClientOrderID mocks base method.
func (m *MockBinanceAPIWrapper) GetOrderDataByClientOrderID(ctx context.Context, pairSymbol, clientOrderID string) (*binance.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDataByClientOrderID", ctx, pairSymbol, clientOrderID)
	ret0, _ := ret[0].(*binance.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDataByClientOrderID indicates an expected call of GetOrderDataByClientOrderID.
func (mr *MockBinanceAPIWrapperMockRecorder) GetOrderDataByClientOrderID(ctx, pairSymbol, clientOrderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDataByClientOrderID", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetOrderDataByClientOrderID), ctx, pairSymbol, clientOrderID)
}

// GetOrderDataByOrderID mocks base method.
func (m *MockBinanceAPIWrapper) GetOrderDataByOrderID(ctx context.Context, pairSymbol string, orderID int64) (*binance.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDataByOrderID", ctx, pairSymbol, orderID)
	ret0, _ := ret[0].(*binance.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDataByOrderID indicates an expected call of GetOrderDataByOrderID.
func (mr *MockBinanceAPIWrapperMockRecorder) GetOrderDataByOrderID(ctx, pairSymbol, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDataByOrderID", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetOrderDataByOrderID), ctx, pairSymbol, orderID)
}

// GetOrderTradeHistory mocks base method.
func (m *MockBinanceAPIWrapper) GetOrderTradeHistory(ctx context.Context, orderID int64, pairSymbol string) ([]*binance.TradeV3, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderTradeHistory", ctx, orderID, pairSymbol)
	ret0, _ := ret[0].([]*binance.TradeV3)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderTradeHistory indicates an expected call of GetOrderTradeHistory.
func (mr *MockBinanceAPIWrapperMockRecorder) GetOrderTradeHistory(ctx, orderID, pairSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderTradeHistory", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetOrderTradeHistory), ctx, orderID, pairSymbol)
}

// GetPrices mocks base method.
func (m *MockBinanceAPIWrapper) GetPrices(ctx context.Context, pairSymbol string) ([]*binance.SymbolPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrices", ctx, pairSymbol)
	ret0, _ := ret[0].([]*binance.SymbolPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrices indicates an expected call of GetPrices.
func (mr *MockBinanceAPIWrapperMockRecorder) GetPrices(ctx, pairSymbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrices", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).GetPrices), ctx, pairSymbol)
}

// Ping mocks base method.
func (m *MockBinanceAPIWrapper) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBinanceAPIWrapperMockRecorder) Ping(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).Ping), arg0)
}

// PlaceLimitOrder mocks base method.
func (m *MockBinanceAPIWrapper) PlaceLimitOrder(ctx context.Context, pairSymbol string, orderSide binance.SideType, qty, price, optionalClientOrderID string) (*binance.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceLimitOrder", ctx, pairSymbol, orderSide, qty, price, optionalClientOrderID)
	ret0, _ := ret[0].(*binance.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceLimitOrder indicates an expected call of PlaceLimitOrder.
func (mr *MockBinanceAPIWrapperMockRecorder) PlaceLimitOrder(ctx, pairSymbol, orderSide, qty, price, optionalClientOrderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceLimitOrder", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).PlaceLimitOrder), ctx, pairSymbol, orderSide, qty, price, optionalClientOrderID)
}

// PlaceMarketOrder mocks base method.
func (m *MockBinanceAPIWrapper) PlaceMarketOrder(ctx context.Context, pairSymbol string, orderSide binance.SideType, qty, price, optionalClientOrderID string) (*binance.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceMarketOrder", ctx, pairSymbol, orderSide, qty, price, optionalClientOrderID)
	ret0, _ := ret[0].(*binance.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceMarketOrder indicates an expected call of PlaceMarketOrder.
func (mr *MockBinanceAPIWrapperMockRecorder) PlaceMarketOrder(ctx, pairSymbol, orderSide, qty, price, optionalClientOrderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceMarketOrder", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).PlaceMarketOrder), ctx, pairSymbol, orderSide, qty, price, optionalClientOrderID)
}

// SubscribeToCandle mocks base method.
func (m *MockBinanceAPIWrapper) SubscribeToCandle(pairSymbol, interval string, eventCallback func(workers.CandleEvent), errorHandler func(error)) (chan struct{}, chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToCandle", pairSymbol, interval, eventCallback, errorHandler)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeToCandle indicates an expected call of SubscribeToCandle.
func (mr *MockBinanceAPIWrapperMockRecorder) SubscribeToCandle(pairSymbol, interval, eventCallback, errorHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToCandle", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).SubscribeToCandle), pairSymbol, interval, eventCallback, errorHandler)
}

// SubscribeToCandlesList mocks base method.
func (m *MockBinanceAPIWrapper) SubscribeToCandlesList(intervalsPerPair map[string]string, eventCallback func(workers.CandleEvent), errorHandler func(error)) (chan struct{}, chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToCandlesList", intervalsPerPair, eventCallback, errorHandler)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeToCandlesList indicates an expected call of SubscribeToCandlesList.
func (mr *MockBinanceAPIWrapperMockRecorder) SubscribeToCandlesList(intervalsPerPair, eventCallback, errorHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToCandlesList", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).SubscribeToCandlesList), intervalsPerPair, eventCallback, errorHandler)
}

// SubscribeToPriceEvents mocks base method.
func (m *MockBinanceAPIWrapper) SubscribeToPriceEvents(pairSymbol string, eventCallback binance.WsBookTickerHandler, errorHandler func(error)) (chan struct{}, chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToPriceEvents", pairSymbol, eventCallback, errorHandler)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeToPriceEvents indicates an expected call of SubscribeToPriceEvents.
func (mr *MockBinanceAPIWrapperMockRecorder) SubscribeToPriceEvents(pairSymbol, eventCallback, errorHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToPriceEvents", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).SubscribeToPriceEvents), pairSymbol, eventCallback, errorHandler)
}

// SubscribeToTradeEventsPrivate mocks base method.
func (m *MockBinanceAPIWrapper) SubscribeToTradeEventsPrivate(exchangeTag string, callback workers.TradeEventPrivateCallback, handler func(error)) (chan struct{}, chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTradeEventsPrivate", exchangeTag, callback, handler)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeToTradeEventsPrivate indicates an expected call of SubscribeToTradeEventsPrivate.
func (mr *MockBinanceAPIWrapperMockRecorder) SubscribeToTradeEventsPrivate(exchangeTag, callback, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTradeEventsPrivate", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).SubscribeToTradeEventsPrivate), exchangeTag, callback, handler)
}

// Sync mocks base method.
func (m *MockBinanceAPIWrapper) Sync(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync", arg0)
}

// Sync indicates an expected call of Sync.
func (mr *MockBinanceAPIWrapperMockRecorder) Sync(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockBinanceAPIWrapper)(nil).Sync), arg0)
}
