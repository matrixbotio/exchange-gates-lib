// Code generated by MockGen. DO NOT EDIT.
// Source: price.go
//
// Generated by this command:
//
//	mockgen -source=price.go -destination=mock_price.go -package=workers
//

// Package workers is a generated GoMock package.
package workers

import (
	reflect "reflect"

	structs "github.com/matrixbotio/exchange-gates-lib/pkg/structs"
	gomock "go.uber.org/mock/gomock"
)

// MockIPriceWorker is a mock of IPriceWorker interface.
type MockIPriceWorker struct {
	ctrl     *gomock.Controller
	recorder *MockIPriceWorkerMockRecorder
	isgomock struct{}
}

// MockIPriceWorkerMockRecorder is the mock recorder for MockIPriceWorker.
type MockIPriceWorkerMockRecorder struct {
	mock *MockIPriceWorker
}

// NewMockIPriceWorker creates a new mock instance.
func NewMockIPriceWorker(ctrl *gomock.Controller) *MockIPriceWorker {
	mock := &MockIPriceWorker{ctrl: ctrl}
	mock.recorder = &MockIPriceWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPriceWorker) EXPECT() *MockIPriceWorkerMockRecorder {
	return m.recorder
}

// GetExchangeTag mocks base method.
func (m *MockIPriceWorker) GetExchangeTag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeTag")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchangeTag indicates an expected call of GetExchangeTag.
func (mr *MockIPriceWorkerMockRecorder) GetExchangeTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeTag", reflect.TypeOf((*MockIPriceWorker)(nil).GetExchangeTag))
}

// Stop mocks base method.
func (m *MockIPriceWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockIPriceWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIPriceWorker)(nil).Stop))
}

// SubscribeToPriceEvents mocks base method.
func (m *MockIPriceWorker) SubscribeToPriceEvents(pairSymbols []string, errorHandler func(error)) (map[string]structs.WorkerChannels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToPriceEvents", pairSymbols, errorHandler)
	ret0, _ := ret[0].(map[string]structs.WorkerChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToPriceEvents indicates an expected call of SubscribeToPriceEvents.
func (mr *MockIPriceWorkerMockRecorder) SubscribeToPriceEvents(pairSymbols, errorHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToPriceEvents", reflect.TypeOf((*MockIPriceWorker)(nil).SubscribeToPriceEvents), pairSymbols, errorHandler)
}
