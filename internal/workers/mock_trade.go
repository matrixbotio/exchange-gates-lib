// Code generated by MockGen. DO NOT EDIT.
// Source: trade.go
//
// Generated by this command:
//
//	mockgen -source=trade.go -destination=mock_trade.go -package=workers
//

// Package workers is a generated GoMock package.
package workers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITradeEventWorker is a mock of ITradeEventWorker interface.
type MockITradeEventWorker struct {
	ctrl     *gomock.Controller
	recorder *MockITradeEventWorkerMockRecorder
	isgomock struct{}
}

// MockITradeEventWorkerMockRecorder is the mock recorder for MockITradeEventWorker.
type MockITradeEventWorkerMockRecorder struct {
	mock *MockITradeEventWorker
}

// NewMockITradeEventWorker creates a new mock instance.
func NewMockITradeEventWorker(ctrl *gomock.Controller) *MockITradeEventWorker {
	mock := &MockITradeEventWorker{ctrl: ctrl}
	mock.recorder = &MockITradeEventWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITradeEventWorker) EXPECT() *MockITradeEventWorkerMockRecorder {
	return m.recorder
}

// GetExchangeTag mocks base method.
func (m *MockITradeEventWorker) GetExchangeTag() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeTag")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchangeTag indicates an expected call of GetExchangeTag.
func (mr *MockITradeEventWorkerMockRecorder) GetExchangeTag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeTag", reflect.TypeOf((*MockITradeEventWorker)(nil).GetExchangeTag))
}

// Stop mocks base method.
func (m *MockITradeEventWorker) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockITradeEventWorkerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockITradeEventWorker)(nil).Stop))
}

// SubscribeToTradeEvents mocks base method.
func (m *MockITradeEventWorker) SubscribeToTradeEvents(symbol string, eventCallback TradeEventCallback, errorHandler func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTradeEvents", symbol, eventCallback, errorHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTradeEvents indicates an expected call of SubscribeToTradeEvents.
func (mr *MockITradeEventWorkerMockRecorder) SubscribeToTradeEvents(symbol, eventCallback, errorHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTradeEvents", reflect.TypeOf((*MockITradeEventWorker)(nil).SubscribeToTradeEvents), symbol, eventCallback, errorHandler)
}

// SubscribeToTradeEventsPrivate mocks base method.
func (m *MockITradeEventWorker) SubscribeToTradeEventsPrivate(eventCallback TradeEventPrivateCallback, errorHandler func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTradeEventsPrivate", eventCallback, errorHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTradeEventsPrivate indicates an expected call of SubscribeToTradeEventsPrivate.
func (mr *MockITradeEventWorkerMockRecorder) SubscribeToTradeEventsPrivate(eventCallback, errorHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTradeEventsPrivate", reflect.TypeOf((*MockITradeEventWorker)(nil).SubscribeToTradeEventsPrivate), eventCallback, errorHandler)
}
